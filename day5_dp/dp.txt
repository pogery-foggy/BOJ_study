동적 계획 알고리즘은 그리디 알고리즘과 같이 
최적화 문제를 해결하는 알고리즘이다.
최적화 문제: 최적[최대값이나 최소값 같은] 값을 구하는 문제
해당 문제에 여러 해가 있을 수 있다. 
The 최적해를 구하는 것이 아니라 an 최적해를 구하는 것이다.

최적 부분문제 구조 optimal substructure
중복 부분문제 구조 overlapping subproblems

최적 부분문제 구조
최적화의 원칙을 만족해야만 효율적으로 사용 할 수 있다
최적화의 원칙이란 N을 만족할 때 작은 문제들의 해 역시 최적이어야 한다는 것.

중복 부분문제 구조
큰 문제를 이루는 작은 문제들을 먼저 해결하고 
작은 문제들의 최적 해를 이용하여 큰 문제를 해결한다.
순환적으로 큰 문제를 해결한다.

분할 정복 동적 계획법의 비교

분할 정복
연관없는 부분 문제로 분할한다.
부분문제를 독립, 재귀적으로 해결한다.
부분문제의 해를 결합한다.
예: 병합정렬 퀵정렬

DP 
부분문제들이 연관이 없으면 적용할 수 없다.
즉 부분 문제들은 더 작은 부분문제들을 공유한다.
모든 부분문제를 한번만 계산하고 결과를 저장하고 재사용한다.

분할정복은 하향식 방법  Dp는 상향식 방법으로 접근한다.
이러한 관계는 문제에 따라 다르고, 대부분의 경우 뚜렷이 보이지 않아서
함축적인 순서[implicit order]라고한다
그러나 DP도 재귀적으로 부분문제를 호출하는 하향식 방법으로 구현이 가능하다.
(예:TSP문제)

3단계 DP적용 접근 방법
1.최적해 구조의 특성을 파악하라
 v.문제를 부분문제로 나눈다.
2.최적해의 값을 재귀적으로 정의하라
 v.부분문제의 최적해 값에 기반하여 문제의 최적해 값을 정의한다.
3. 상향식 방법으로 최적해의 값을 계산하라
 v. 가장 작은 부분 문제부터 해를 구한 뒤 테이블에 저장한다.
 v. 테이블에 저장되어 있는 부분 문제의 해를 이용하여 점차적으로
   상위 부분 문제의 최적해를 구한다.


목차
   P-NP
   NP 완전 문제 소개
   LIS 
   모든 쌍 최단 경로[플로이드-워샬]
   TSP

   